---
description: 
globs: 
alwaysApply: true
---
 Project: uploadzx — Browser Upload Library (Tus Integration)
🎯 Project Goals
Build a browser-only TypeScript upload library that simplifies file uploads for web apps.

Provide a developer-friendly abstraction over tus-js-client, including:

File selection (input and File System Access API)

Upload progress tracking

Cancel, resume, retry support

Persistent upload state using IndexedDB

Expose a clean, minimal API to:

Manage single and batch uploads

Track per-file upload state

React to lifecycle events (progress, success, failure)

Allow integration with React (future optional module).

Be UI-agnostic — the library must not render any UI, only emit/upload state and actions.

🧱 Architecture Rules
📁 Written in TypeScript, targeting modern browsers (ES2020+).

📦 Use tus-js-client for resumable uploads.

💾 IndexedDB will be used to:

Persist upload progress (tus handles fingerprints automatically)

Store and reuse FileSystemFileHandle objects for reloading file references across page sessions

🔐 File permission persistence should be handled via requestPermission() and queryPermission().

🔌 Use AbortController for cancelation support.

📚 The library must not depend on any UI framework.

🧰 Built and bundled via tsup.

⚙️ Key Modules
FilePicker — for input and file handle picker

TusUploader — wrapper around tus.Upload with events, progress, cancel/resume

UploadQueue — manager for multiple uploads, queueing, state tracking

FileHandleStore — handles IndexedDB logic for persisting handles


